nsas <- t %>%
dplyr::count(seq_id) %>%
nrow()
source("~/GitHub/WGS_DFI/getRdpPal.R")
taxpal <- getRdpPal(t)
plot_taxonomy <- t %>%
arrange(Kingdom, Phylum, Class, Order, Family, Genus) %>%
mutate(Genus = factor(Genus, levels = unique(Genus))) %>%
group_by(seq_id) %>%
arrange(Genus) %>%
mutate(cum.pct = cumsum(pctseqs),
y.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) %>%
ungroup() %>%
dplyr::select(-cum.pct) %>%
mutate(tax.label=ifelse(grepl("unclassified$",Genus),genLab,gsub(" ","\n",Species)),
tax.label = ifelse(pctseqs >= .1, as.character(tax.label), "")) %>%
ggplot(aes(seq_id, pctseqs)) +
theme_bw() +
geom_col(aes(fill = Genus)) +
scale_fill_manual(values = taxpal) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6.5)) +
geom_text(aes(y=1-y.text,x=seq_id,label=tax.label),lineheight=0.6,size=2.5, angle = 90) +
labs(y = "contig length % abundance", title = "kraken2 taxonomy",
caption = paste0("# of isolates: ", nsas))
p
plot_taxonomy
df_fun = readin_kraken2_contigs("~/Library/CloudStorage/Box-Box/Genomics/ShortReads/DFI Runs/SSG98/kraken2_fungal/")
t <- df_std %>%
mutate(taxfoo = str_extract(taxon, "taxid [0-9]+")) %>%
separate(taxfoo, c("taxidfoo","tax_id"), convert = T) %>%
left_join(taxmap) %>%
add_count(seq_id, wt = length, name = "totalLen") %>%
mutate(pctseqs = length/totalLen) %>%
group_by(seq_id, kingdom, phylum, class, order, family, genus, species) %>%
dplyr::summarize(total_length = sum(length),
pctseqs = sum(pctseqs)) %>%
rename_at(vars(kingdom:species), tools::toTitleCase) %>%
mutate_at(vars(Kingdom:Species), chgUnclassified) %>%
mutate(genLab = Genus,
Genus = paste0(Phylum, "-", Class, "-", Order, "-", Family, "-", Genus)) %>%
mutate(Species = ifelse(is.na(Species), "unknown", Species)) %>%
ungroup()
nsas <- t %>%
dplyr::count(seq_id) %>%
nrow()
taxpal <- getRdpPal(t)
p2 <- t %>%
arrange(Kingdom, Phylum, Class, Order, Family, Genus) %>%
mutate(Genus = factor(Genus, levels = unique(Genus))) %>%
group_by(seq_id) %>%
arrange(Genus) %>%
mutate(cum.pct = cumsum(pctseqs),
y.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) %>%
ungroup() %>%
dplyr::select(-cum.pct) %>%
mutate(tax.label=ifelse(grepl("unclassified$",Genus),genLab,gsub(" ","\n",Species)),
tax.label = ifelse(pctseqs >= .1, as.character(tax.label), "")) %>%
ggplot(aes(seq_id, pctseqs)) +
theme_bw() +
geom_col(aes(fill = Genus)) +
scale_fill_manual(values = taxpal) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6.5)) +
geom_text(aes(y=1-y.text,x=seq_id,label=tax.label),lineheight=0.6,size=2.5, angle = 90) +
labs(y = "contig length % abundance", title = "kraken2 taxonomy",
caption = paste0("# of isolates: ", nsas))
p1
df_std = readin_kraken2_contigs("~/Library/CloudStorage/Box-Box/Genomics/ShortReads/DFI Runs/SSG98/kraken2/") %>%
filter(grepl("EM", seq_id))
t <- df_std %>%
mutate(taxfoo = str_extract(taxon, "taxid [0-9]+")) %>%
separate(taxfoo, c("taxidfoo","tax_id"), convert = T) %>%
left_join(taxmap) %>%
add_count(seq_id, wt = length, name = "totalLen") %>%
mutate(pctseqs = length/totalLen) %>%
group_by(seq_id, kingdom, phylum, class, order, family, genus, species) %>%
dplyr::summarize(total_length = sum(length),
pctseqs = sum(pctseqs)) %>%
rename_at(vars(kingdom:species), tools::toTitleCase) %>%
mutate_at(vars(Kingdom:Species), chgUnclassified) %>%
mutate(genLab = Genus,
Genus = paste0(Phylum, "-", Class, "-", Order, "-", Family, "-", Genus)) %>%
mutate(Species = ifelse(is.na(Species), "unknown", Species)) %>%
ungroup()
nsas <- t %>%
dplyr::count(seq_id) %>%
nrow()
taxpal <- getRdpPal(t)
p1 <- t %>%
arrange(Kingdom, Phylum, Class, Order, Family, Genus) %>%
mutate(Genus = factor(Genus, levels = unique(Genus))) %>%
group_by(seq_id) %>%
arrange(Genus) %>%
mutate(cum.pct = cumsum(pctseqs),
y.text = (cum.pct + c(0, cum.pct[-length(cum.pct)]))/2) %>%
ungroup() %>%
dplyr::select(-cum.pct) %>%
mutate(tax.label=ifelse(grepl("unclassified$",Genus),genLab,gsub(" ","\n",Species)),
tax.label = ifelse(pctseqs >= .1, as.character(tax.label), "")) %>%
ggplot(aes(seq_id, pctseqs)) +
theme_bw() +
geom_col(aes(fill = Genus)) +
scale_fill_manual(values = taxpal) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 6.5)) +
geom_text(aes(y=1-y.text,x=seq_id,label=tax.label),lineheight=0.6,size=2.5, angle = 90) +
labs(y = "contig length % abundance", title = "kraken2 taxonomy",
caption = paste0("# of isolates: ", nsas))
library(patchwork)
p1/p2
p1 + theme(axis.text.x = element_blank()) + labs(x = "")/p2
(p1 + theme(axis.text.x = element_blank()) + labs(x = "", caption = "")) /
(p2 + theme(title = ""))
(p1 + theme(axis.text.x = element_blank()) + labs(x = "", caption = "")) /
(p2 + labs(title = ""))
p2
library(shiny); source('GitHub/DFI_Metabolomics_QC_quant/main.R')
library(shiny)
library(shinythemes)
library(shinyjs)
library(shinyBS)
library(shinyscreenshot)
library(shinyalert)
library(rhandsontable)
library(tidyverse)
library(reshape2)
library(DT)
library(data.table)
library(broom)
library(ggsci)
library(gridExtra)
library(ggpmisc)
library(paletteer)
library(ggforce)
# 0. Initializations ###################################################################################################
# 1. set up directory and files ########################################################################################
#wddir <- "/Volumes/chaubard-lab/shiny_workspace/csvs/"
wddir <- "/Users/ramanujam/GitHub/test_files"
#'* Read quant tables*
df_quant_BileAcids <- read.csv("quant_compounds_bile_acids.csv")
library(shiny)
library(shinythemes)
library(shinyjs)
library(shinyBS)
library(shinyscreenshot)
library(shinyalert)
library(rhandsontable)
library(tidyverse)
library(reshape2)
library(DT)
library(data.table)
library(broom)
library(ggsci)
library(gridExtra)
library(ggpmisc)
library(paletteer)
library(ggforce)
# 0. Initializations ###################################################################################################
# 1. set up directory and files ########################################################################################
#wddir <- "/Volumes/chaubard-lab/shiny_workspace/csvs/"
wddir <- "/Users/ramanujam/GitHub/test_files"
#'* Read quant tables*
df_quant_BileAcids <- read.csv("quant_compounds_bile_acids.csv")
getwd()
setwd(wddir)
library(shiny)
library(shinythemes)
library(shinyjs)
library(shinyBS)
library(shinyscreenshot)
library(shinyalert)
library(rhandsontable)
library(tidyverse)
library(reshape2)
library(DT)
library(data.table)
library(broom)
library(ggsci)
library(gridExtra)
library(ggpmisc)
library(paletteer)
library(ggforce)
# 0. Initializations ###################################################################################################
# 1. set up directory and files ########################################################################################
#wddir <- "/Volumes/chaubard-lab/shiny_workspace/csvs/"
wddir <- "/Users/ramanujam/GitHub/test_files"
setwd(wddir)
#'* Read quant tables*
df_quant_BileAcids <- read.csv("quant_compounds_bile_acids.csv")
df_quant_PFBBr <- read.csv("quant_compounds_pfbbr.csv")
df_quant_Tryptophan <- read.csv("quant_compounds_tryptophan.csv")
# 2. FUNCTIONS #########################################################################################################
## 2.1 Read and clean data from input file =============================================================================
Function_readin_csv_1 <- function(filename, zero_threshold, recursive=F)
{
df_input <- read.csv(file = filename) %>%
select(-CAS.ID) %>%
reshape2::melt(id.vars=c("Compound.Name", "Formula", "Mass", "RT")) %>%
replace_na(list(value = 0)) %>%
mutate(itsd = str_extract(Compound.Name,pattern="ITSD"),
com = gsub("\\_ITSD","",Compound.Name),
Data.File=variable) %>%
separate(com,into=c("num","compound_name","letter"),sep="\\_") %>%
separate(variable,into=c("num2","date_run","batch","sampleid","conc"),sep="\\_\\_") %>%
mutate(num2 = gsub("[Xx]", "", num2),
sampleid = paste(num2, sampleid, sep = "_")) %>%
select(Data.File, sampleid, date_run, Compound.Name, compound_name,
batch, letter, itsd, conc, peakarea=value) %>%
mutate(filename = filename,
compound_name = gsub("D[0-9]+\\-","",compound_name),
compound_name = tolower(compound_name),
conc = ifelse(grepl("dil",conc),"diluted","concentrated"),
peakarea = as.numeric(peakarea),
peakarea = ifelse(peakarea <= zero_threshold, 0, peakarea),
cc = str_extract(sampleid, pattern=".*CC.*"),
cc = sub(".*_", "", cc))
return(df_input)
}
Function_readin_csv_2 <- function(filename, zero_threshold, recursive=F){
df_input_raw <- read.csv(file=filename, check.names=F)
colnames(df_input_raw)[2] <- "garbage"
colnames(df_input_raw)[3] <- "sampleid"
colnames(df_input_raw)[4] <- "Data.File"
colnames(df_input_raw)[5] <- "Type"
colnames(df_input_raw)[6] <- "Level"
colnames(df_input_raw)[7] <- "Acq.Date.Time"
colnames(df_input_raw) <- gsub(" Results","",colnames(df_input_raw))
df_input_raw = df_input_raw[-1,]
df_input <- df_input_raw %>%
dplyr::select(-Sample, -garbage,-Type,-Level,-Acq.Date.Time, -Data.File) %>%
dplyr::slice(-1) %>%
reshape2::melt(id.vars="sampleid") %>%
mutate(value = as.numeric(value)) %>%
replace_na(list(value = 0)) %>%
dplyr::rename(compound_name = variable) %>%
mutate(itsd = str_extract(compound_name, pattern="ITSD"),
compound_name = tolower(gsub("\\_ITSD","",compound_name))) %>%
separate(sampleid, into=c("inj_num","date_run","batch","sampleid","conc"),sep="\\_\\_") %>%
mutate(sampleid = paste0(inj_num,"_",sampleid)) %>%
dplyr::select(sampleid, date_run, batch, compound_name, itsd, conc, peakarea=value) %>%
mutate(conc = ifelse(grepl("dil",conc),"diluted","concentrated"),
peakarea = ifelse(peakarea <= zero_threshold, 0, peakarea),
cc = str_extract(sampleid, pattern=".*CC.*|.*cc.*"),
cc = sub(".*_", "", toupper(cc))) %>%
mutate(sampleid = ifelse(grepl(".*CC.*|.*cc.*", sampleid), toupper(sampleid), sampleid)) %>%
mutate(compound_name = sub("_[0-9]{4}$", "", compound_name)) %>%
mutate(compound_name = gsub("proline_d7", "proline", compound_name)) # SPECIFIC FOR PFBBr PANEL
return(df_input)
}
## 2.1 Plot ITSD =======================================================================================================
Function_plot_itsd <- function(df_itsd, df_itsd_stats, num_pages)
{
df_itsd %>%
filter(!grepl("MB|plasma",sampleid, ignore.case = T)) %>%
group_by(compound_name) %>%
mutate(average = mean(peakarea),
stdev = sd(peakarea)) %>%
mutate(flag = ifelse(peakarea > average + (1.5 * stdev) |
peakarea < average - (1.5 * stdev), paste(num,batch,sampleid, sep = "_"), NA)) %>%
group_by(compound_name) %>%
ggplot(., aes(x = num, y = peakarea, group = compound_name, label = flag)) +
geom_point(aes(color = compound_name, shape = cc_shape), fill = "black", alpha = 0.6, size = 2) +
geom_line(aes(y = average, color = compound_name)) +
geom_line(aes(y = average + 1.5*stdev, color = compound_name), linetype = "dashed") +
geom_line(aes(y = average - 1.5*stdev, color = compound_name), linetype = "dashed") +
geom_ribbon(aes(ymin = average - stdev, ymax = average + stdev,
fill = compound_name), alpha=0.2) +
ggrepel::geom_label_repel(size = 1.2, max.overlaps = Inf,
min.segment.length = 0.1, label.padding = 0.1, na.rm=T) +
theme_bw() +
theme(panel.grid.minor= element_blank(),
panel.grid.major.x = element_blank(),
legend.text = element_text(color = "black", size = 8),
legend.title = element_text(color = "black", size = 10),
legend.position = "top",
strip.text=element_text(color = "black", size=5),
axis.text =element_text(color = "black", size=8),
axis.title = element_text(color = "black", size = 14),
plot.margin = margin(1,0.5,0,0.6, unit = 'cm')) +
ggsci::scale_color_ucscgb() +
ggsci::scale_fill_ucscgb() +
guides(color = guide_legend(title = "Internal Standard Compound",
override.aes = list(size = 2.5), nrow = 2,
title.position="top", title.hjust = 0.5,
label.position = "right"), fill = "none",
shape = guide_legend(title = "",
override.aes = list(size = 2.5), nrow = 2,
title.position="top", title.hjust = 0.5,
label.position = "right")) +
scale_shape_manual(values = c(24,16))+
scale_y_continuous(label = scales::scientific) +
scale_x_continuous(breaks = seq(0,150,25)) +
ylab("Raw Peak Area\n") +
xlab("\nInjection Number")
}
# 2. Execution #########################################################################################################
source('ui.R', local=TRUE)
setwd('~/GitHub/DFI_Metabolomics_QC_quant/')
library(shiny)
library(shinythemes)
library(shinyjs)
library(shinyBS)
library(shinyscreenshot)
library(shinyalert)
library(rhandsontable)
library(tidyverse)
library(reshape2)
library(DT)
library(data.table)
library(broom)
library(ggsci)
library(gridExtra)
library(ggpmisc)
library(paletteer)
library(ggforce)
# 0. Initializations ###################################################################################################
# 1. set up directory and files ########################################################################################
#wddir <- "/Volumes/chaubard-lab/shiny_workspace/csvs/"
wddir <- "/Users/ramanujam/GitHub/test_files"
setwd('~/GitHub/DFI_Metabolomics_QC_quant/')
#'* Read quant tables*
df_quant_BileAcids <- read.csv("quant_compounds_bile_acids.csv")
df_quant_PFBBr <- read.csv("quant_compounds_pfbbr.csv")
df_quant_Tryptophan <- read.csv("quant_compounds_tryptophan.csv")
# 2. FUNCTIONS #########################################################################################################
## 2.1 Read and clean data from input file =============================================================================
Function_readin_csv_1 <- function(filename, zero_threshold, recursive=F)
{
df_input <- read.csv(file = filename) %>%
select(-CAS.ID) %>%
reshape2::melt(id.vars=c("Compound.Name", "Formula", "Mass", "RT")) %>%
replace_na(list(value = 0)) %>%
mutate(itsd = str_extract(Compound.Name,pattern="ITSD"),
com = gsub("\\_ITSD","",Compound.Name),
Data.File=variable) %>%
separate(com,into=c("num","compound_name","letter"),sep="\\_") %>%
separate(variable,into=c("num2","date_run","batch","sampleid","conc"),sep="\\_\\_") %>%
mutate(num2 = gsub("[Xx]", "", num2),
sampleid = paste(num2, sampleid, sep = "_")) %>%
select(Data.File, sampleid, date_run, Compound.Name, compound_name,
batch, letter, itsd, conc, peakarea=value) %>%
mutate(filename = filename,
compound_name = gsub("D[0-9]+\\-","",compound_name),
compound_name = tolower(compound_name),
conc = ifelse(grepl("dil",conc),"diluted","concentrated"),
peakarea = as.numeric(peakarea),
peakarea = ifelse(peakarea <= zero_threshold, 0, peakarea),
cc = str_extract(sampleid, pattern=".*CC.*"),
cc = sub(".*_", "", cc))
return(df_input)
}
Function_readin_csv_2 <- function(filename, zero_threshold, recursive=F){
df_input_raw <- read.csv(file=filename, check.names=F)
colnames(df_input_raw)[2] <- "garbage"
colnames(df_input_raw)[3] <- "sampleid"
colnames(df_input_raw)[4] <- "Data.File"
colnames(df_input_raw)[5] <- "Type"
colnames(df_input_raw)[6] <- "Level"
colnames(df_input_raw)[7] <- "Acq.Date.Time"
colnames(df_input_raw) <- gsub(" Results","",colnames(df_input_raw))
df_input_raw = df_input_raw[-1,]
df_input <- df_input_raw %>%
dplyr::select(-Sample, -garbage,-Type,-Level,-Acq.Date.Time, -Data.File) %>%
dplyr::slice(-1) %>%
reshape2::melt(id.vars="sampleid") %>%
mutate(value = as.numeric(value)) %>%
replace_na(list(value = 0)) %>%
dplyr::rename(compound_name = variable) %>%
mutate(itsd = str_extract(compound_name, pattern="ITSD"),
compound_name = tolower(gsub("\\_ITSD","",compound_name))) %>%
separate(sampleid, into=c("inj_num","date_run","batch","sampleid","conc"),sep="\\_\\_") %>%
mutate(sampleid = paste0(inj_num,"_",sampleid)) %>%
dplyr::select(sampleid, date_run, batch, compound_name, itsd, conc, peakarea=value) %>%
mutate(conc = ifelse(grepl("dil",conc),"diluted","concentrated"),
peakarea = ifelse(peakarea <= zero_threshold, 0, peakarea),
cc = str_extract(sampleid, pattern=".*CC.*|.*cc.*"),
cc = sub(".*_", "", toupper(cc))) %>%
mutate(sampleid = ifelse(grepl(".*CC.*|.*cc.*", sampleid), toupper(sampleid), sampleid)) %>%
mutate(compound_name = sub("_[0-9]{4}$", "", compound_name)) %>%
mutate(compound_name = gsub("proline_d7", "proline", compound_name)) # SPECIFIC FOR PFBBr PANEL
return(df_input)
}
## 2.1 Plot ITSD =======================================================================================================
Function_plot_itsd <- function(df_itsd, df_itsd_stats, num_pages)
{
df_itsd %>%
filter(!grepl("MB|plasma",sampleid, ignore.case = T)) %>%
group_by(compound_name) %>%
mutate(average = mean(peakarea),
stdev = sd(peakarea)) %>%
mutate(flag = ifelse(peakarea > average + (1.5 * stdev) |
peakarea < average - (1.5 * stdev), paste(num,batch,sampleid, sep = "_"), NA)) %>%
group_by(compound_name) %>%
ggplot(., aes(x = num, y = peakarea, group = compound_name, label = flag)) +
geom_point(aes(color = compound_name, shape = cc_shape), fill = "black", alpha = 0.6, size = 2) +
geom_line(aes(y = average, color = compound_name)) +
geom_line(aes(y = average + 1.5*stdev, color = compound_name), linetype = "dashed") +
geom_line(aes(y = average - 1.5*stdev, color = compound_name), linetype = "dashed") +
geom_ribbon(aes(ymin = average - stdev, ymax = average + stdev,
fill = compound_name), alpha=0.2) +
ggrepel::geom_label_repel(size = 1.2, max.overlaps = Inf,
min.segment.length = 0.1, label.padding = 0.1, na.rm=T) +
theme_bw() +
theme(panel.grid.minor= element_blank(),
panel.grid.major.x = element_blank(),
legend.text = element_text(color = "black", size = 8),
legend.title = element_text(color = "black", size = 10),
legend.position = "top",
strip.text=element_text(color = "black", size=5),
axis.text =element_text(color = "black", size=8),
axis.title = element_text(color = "black", size = 14),
plot.margin = margin(1,0.5,0,0.6, unit = 'cm')) +
ggsci::scale_color_ucscgb() +
ggsci::scale_fill_ucscgb() +
guides(color = guide_legend(title = "Internal Standard Compound",
override.aes = list(size = 2.5), nrow = 2,
title.position="top", title.hjust = 0.5,
label.position = "right"), fill = "none",
shape = guide_legend(title = "",
override.aes = list(size = 2.5), nrow = 2,
title.position="top", title.hjust = 0.5,
label.position = "right")) +
scale_shape_manual(values = c(24,16))+
scale_y_continuous(label = scales::scientific) +
scale_x_continuous(breaks = seq(0,150,25)) +
ylab("Raw Peak Area\n") +
xlab("\nInjection Number")
}
# 2. Execution #########################################################################################################
source('ui.R', local=TRUE)
source('server.R', local=TRUE)
shinyApp(ui=ui, server=server)
rvalues=list()
rvalues$panel='Tryptophan'
input = list()
input$filename = '20240212_Tryptophan_CLIN072Bld.csv'
# Set zero threshold
zero_threshold <- case_when(
rvalues$panel=="Tryptophan" ~ 100,
rvalues$panel=="BileAcids" ~ 0,
TRUE ~ 1000)
# Read and clean input data --------------------------------
if (rvalues$panel == "BileAcids") {
rvalues$df_input <- Function_readin_csv_1(filename, zero_threshold)
} else {
rvalues$df_input <- Function_readin_csv_2(filename, zero_threshold)
}
filename <- file.path(wddir,input$filename)
# Read and clean input data --------------------------------
if (rvalues$panel == "BileAcids") {
rvalues$df_input <- Function_readin_csv_1(filename, zero_threshold)
} else {
rvalues$df_input <- Function_readin_csv_2(filename, zero_threshold)
}
rvalues$df_input
# Check data availability for dil/conc for each compound --------------------------------
dil_conc_found <- rvalues$df_input %>%
dplyr::select(compound_name, conc) %>%
group_by(compound_name) %>%
mutate(found_dil = ifelse(any(grepl("diluted", conc)), "Yes", "No"),
found_conc = ifelse(any(grepl("concentrated", conc)), "Yes", "No")) %>%
distinct(compound_name, .keep_all = T) %>%
dplyr::select(-conc)
rvalues$df_quant_compounds <- get(paste0("df_quant_", rvalues$panel)) %>%
mutate(compound_name = tolower(compound_name)) %>%
mutate(found = ifelse(compound_name %in% rvalues$df_input$compound_name, "Yes","No"),
.after = conc) %>%
mutate(conc = factor(conc, levels = sort(unique(conc)))) %>%
left_join(dil_conc_found, by="compound_name") %>%
relocate(found_dil, .after = found) %>%
relocate(found_conc, .after = found) %>%
distinct()
View(dil_conc_found)
# Find number of cc points for each quant compound --------------------------------
num_cc <- rvalues$df_input %>%
dplyr::select(compound_name, cc) %>%
filter(compound_name %in% rvalues$df_quant_compounds$compound_name) %>%
group_by(compound_name) %>%
summarize(num_cc = n_distinct(cc, na.rm = T))
rvalues$df_quant_compounds <- rvalues$df_quant_compounds %>%
left_join(num_cc, by="compound_name") %>%
relocate(num_cc, .after = found_dil)
df_quant_compounds = rvalues$df_quant_compounds
View(df_quant_compounds)
# Get quant compounds --------------------------------
rvalues$quant_compounds <- rvalues$df_quant_compounds %>% filter(found=="Yes") %>% pull(compound_name)
# ITSD dataframe (per sample for normalization) --------------------------------
rvalues$df_itsd <- rvalues$df_input %>%
filter(itsd == "ITSD") %>%
filter(!grepl("MB|Pooled|Plasma|Standard|Spiked",sampleid, ignore.case = T)) %>%
mutate(peakarea = ifelse(peakarea <= zero_threshold, 0, peakarea),
num = str_extract(sampleid, "[0-9][0-9][0-9]"),
num = as.numeric(num),
cc_shape = ifelse(grepl("CC[0-9]+", sampleid), "Calibration Curve Sample", "Standard Sample"))
if (rvalues$panel == "BileAcids") { # For bile acids panel
rvalues$df_itsd_stats <- rvalues$df_input %>%
filter(itsd=="ITSD") %>%
group_by(sampleid, letter) %>%
summarize(avg = mean(peakarea),
med = median(peakarea)) %>%
ungroup()
} else {  # For non bile acids panel
rvalues$df_itsd_stats <- rvalues$df_input %>%
filter(itsd=="ITSD") %>%
group_by(sampleid) %>%
summarize(avg = mean(peakarea),
med = median(peakarea)) %>%
ungroup()
}
df_itsd = rvalues$df_itsd
View(df_itsd)
